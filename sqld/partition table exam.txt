### 1. 테이블 및 파티션 생성

먼저, `sales` 테이블을 생성하고 날짜 기반 범위 파티션을 설정합니다.

```sql
CREATE TABLE sales (
    sale_id NUMBER,
    sale_date DATE,
    amount NUMBER
)
PARTITION BY RANGE (sale_date) (
    PARTITION p1 VALUES LESS THAN (TO_DATE('2022-01-01', 'YYYY-MM-DD')),
    PARTITION p2 VALUES LESS THAN (TO_DATE('2023-01-01', 'YYYY-MM-DD')),
    PARTITION p3 VALUES LESS THAN (TO_DATE('2024-01-01', 'YYYY-MM-DD')),
    PARTITION p4 VALUES LESS THAN (MAXVALUE)
);
```

### 2. 샘플 데이터 삽입

샘플 데이터를 삽입하여 파티션을 채웁니다.

```sql
-- p1 파티션 데이터 (2021년도 데이터)
INSERT INTO sales (sale_id, sale_date, amount) VALUES (1, TO_DATE('2021-06-15', 'YYYY-MM-DD'), 100);
INSERT INTO sales (sale_id, sale_date, amount) VALUES (2, TO_DATE('2021-11-20', 'YYYY-MM-DD'), 150);

-- p2 파티션 데이터 (2022년도 데이터)
INSERT INTO sales (sale_id, sale_date, amount) VALUES (3, TO_DATE('2022-01-10', 'YYYY-MM-DD'), 200);
INSERT INTO sales (sale_id, sale_date, amount) VALUES (4, TO_DATE('2022-07-05', 'YYYY-MM-DD'), 250);

-- p3 파티션 데이터 (2023년도 데이터)
INSERT INTO sales (sale_id, sale_date, amount) VALUES (5, TO_DATE('2023-03-15', 'YYYY-MM-DD'), 300);
INSERT INTO sales (sale_id, sale_date, amount) VALUES (6, TO_DATE('2023-09-25', 'YYYY-MM-DD'), 350);

-- p4 파티션 데이터 (2024년도 이후 데이터)
INSERT INTO sales (sale_id, sale_date, amount) VALUES (7, TO_DATE('2024-01-05', 'YYYY-MM-DD'), 400);
INSERT INTO sales (sale_id, sale_date, amount) VALUES (8, TO_DATE('2024-06-10', 'YYYY-MM-DD'), 450);
```

### 3. 샘플 쿼리

다음은 위의 테이블과 데이터를 활용한 다양한 쿼리 예제입니다.

#### 특정 날짜 범위의 데이터를 조회하기

2023년의 데이터를 조회합니다.

```sql
SELECT sale_id, sale_date, amount
FROM sales
WHERE sale_date >= TO_DATE('2023-01-01', 'YYYY-MM-DD')
  AND sale_date < TO_DATE('2024-01-01', 'YYYY-MM-DD');
```

#### 특정 파티션의 데이터를 조회하기

`p2` 파티션의 데이터를 조회합니다.

```sql
SELECT sale_id, sale_date, amount
FROM sales PARTITION (p2);
```

#### 파티션 키에 기반한 집계 쿼리

연도별 총 판매 금액을 집계합니다.

```sql
SELECT
    TO_CHAR(sale_date, 'YYYY') AS sale_year,
    SUM(amount) AS total_amount
FROM sales
GROUP BY TO_CHAR(sale_date, 'YYYY')
ORDER BY sale_year;
```

#### 특정 날짜의 데이터를 조회하기

2023년 3월 15일의 데이터를 조회합니다.

```sql
SELECT sale_id, sale_date, amount
FROM sales
WHERE sale_date = TO_DATE('2023-03-15', 'YYYY-MM-DD');
```

#### 최신 데이터 조회하기

가장 최근의 판매 데이터를 10개 조회합니다.

```sql
SELECT sale_id, sale_date, amount
FROM sales
ORDER BY sale_date DESC
FETCH FIRST 10 ROWS ONLY;
```

### 4. 파티션 유지보수 작업

#### 파티션에 대한 통계 정보 수집

`p3` 파티션의 통계를 수집합니다.

```sql
BEGIN
    DBMS_STATS.GATHER_TABLE_STATS('your_schema_name', 'sales', PARTNAME => 'p3');
END;
```

이 예제들을 통해 파티션 테이블을 생성하고 데이터를 삽입한 후, 다양한 쿼리를 실행해 볼 수 있습니다. 이로써 파티션 테이블의 장점을 체감할 수 있을 것입니다.